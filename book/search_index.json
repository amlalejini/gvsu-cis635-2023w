[["index.html", "GVSU CIS 635 - Knowledge Discovery and Data Mining (Winter 2023) Chapter 1 Introduction", " GVSU CIS 635 - Knowledge Discovery and Data Mining (Winter 2023) Instructor: Dr. Alexander Lalejini 2023-01-15 Chapter 1 Introduction This website contains some of the course materials for Winter 2023 CIS 635 Section 02 at Grand Valley State University. "],["homework-1.html", "Chapter 2 Homework 1 2.1 Overview 2.2 Part A. Syllabus 2.3 Part B. Attribute descriptions 2.4 Part C. Thinking about common data mining applications", " Chapter 2 Homework 1 2.1 Overview 2.1.1 Objectives Read through the course syllabus Identify nominal versus ordinal attributes Consider general data mining tasks 2.1.2 Grading Uploaded requested files, 5% File is properly/clearly formatted, 5% Proper section headers for each part of your homework. You clearly indicate which question each of your responses are associated with. Part A., 10% Part B., 30% Part C., 50% 2.1.3 Deliverables .pdf file with your responses 2.1.4 Formatting In the document that you turn in for this homework, include a heading for each Part (Part A, Part B, Part C). Ensure that you clearly indicate which question each of your responses are associated with. 2.2 Part A. Syllabus Read the course syllabus (posted on blackboard). For this question (on the document that you turn in), confirm that you have read the syllabus. Read the academic honesty policy for the GVSU School of Computing: https://www.gvsu.edu/computing/academic-honesty-30.htm. For this question (on the document that you turn in), confirm that you have read and agree to abide by the academic honesty policy. 2.3 Part B. Attribute descriptions You are given a data file (see assignment attachments on blackboard): hw01data.csv. This is a table of ratings for teaching assistants (TA) at some university (this is modified data that originally came from https://archive.ics.uci.edu/ml/datasets.php). There are 6 attributes: id: unique number to identify each rating instructor: id number that identifies the instructor classNbr: id number that identifies the course semester: 1=summer, 2=fall, 3=winter classSize: number of students in the class rating: 1=low, 2=medium, 3=high For each attribute, describe whether it is nominal or ordinal. id instructor classNbr semester classSize rating 2.4 Part C. Thinking about common data mining applications This question asks you to think about clustering. Considering an average kitchen, identify 4 clusters of objects. Name them according to their utility. For example, if I were asked to identify 4 clusters in a sporting goods store, I might choose apparel (e.g., shoes, shirts), containers (e.g., backpacks, coolers), sports equipment (e.g., basketball, tennis racquets), and fishing (e.g., rods, lures). Pick one of the following forms of predictive modeling: regression, classification, or ranking. Describe an application domain or a dataset where you think it would be useful to apply the chosen predictive modeling approach. What attribute(s) would you be predicting? What attributes would you use to make the prediction? "],["getting-started-with-r-markdown.html", "Chapter 3 Getting Started with R Markdown 3.1 Dependencies 3.2 Create a new R Markdown document in RStudio 3.3 Anatomy of an R Markdown document 3.4 “Knitting” 3.5 Resources", " Chapter 3 Getting Started with R Markdown R markdown documents are a way to interweave markdown with R. This enables us to write nicely formatted documents with R code (and output from your R code) embedded directly in the document. Find examples of compiled R markdown documents here: https://rmarkdown.rstudio.com/gallery.html In fact, this page is generated with R Markdown! Source code for this page here. 3.1 Dependencies To use R markdown, you’ll need to install the following packages: markdown and rmarkdown. You should also want to go ahead and install the tinytex package (+ install TinyTex) to be able generate PDF output from your R Markdown documents. See the instructions below! 3.1.1 Installing R packages As previously mentioned, there are many R packages (&gt; 18,000!) with all sorts of useful functionality. To install an R package, use the install.packages function in your R console (e.g., in RStudio). Run ?install.packages in your R console to read its help page. To install the markdown and rmarkdown packages, run the following command in your R console: install.packages(c(&quot;markdown&quot;, &quot;rmarkdown&quot;)) Once the installations finish, you should be able to run the following two commands without errors: library(markdown) library(rmarkdown) For this class, you’ll also need to be able to generate PDF output from your R Markdown documents. To do so, you’ll need to instal LaTex (if you’re not sure what that is, no worries!). Run the following two commands in your R console in RStudio: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() 3.2 Create a new R Markdown document in RStudio Click the new file button in the top right of the RStudio window, and select R Markdown. In RStudio, you should get a pop-up for creating a new r markdown document. For now, there are two relevant options: Click the “Create Empty Document” in the bottom left of the popup. This will create an empty R markdown file for you. Fill out the title, author (you!), and date fields and press “Okay”. This will create a new R markdown file, but RStudio will initialize your file with a bunch of stuff (this stuff is helpful information, but you will want to delete it all for any assignments in this class). 3.3 Anatomy of an R Markdown document There are three basic components in an R Markdown document: the metadata, text, and code. Here’s the contents for a minimal R Markdown document (from https://bookdown.org/yihui/rmarkdown/basics.html): An R Markdown document should be a plain text file (i.e., don’t try to write one in google docs or microsoft word!) and conventionally has the .Rmd file extension. 3.3.1 Frontmatter (metadata) The metadata (or the frontmatter) specifies how your R Markdown should be compiled. E.g., the output file type, whether to include a table of contents, etc. The metadata should be written between a pair of three dashes --- at the top of your document (see minimal example). For now, don’t worry too much about what you should include in your document metadata. For the most part, you can just use what RStudio includes in your document. 3.3.2 Text The body of your document follows the metadata. Any text (i.e., everything that isn’t code) you include in your document should follow markdown syntax. If you’re not already familiar with markdown, read over this: https://www.markdownguide.org/getting-started. For basic markdown syntax, see: https://www.markdownguide.org/basic-syntax/. Being familiar with basic syntax should be just about everything you need for your homework assignments in this class. For more advanced markdown syntax, see: https://www.markdownguide.org/extended-syntax/. You can also refer to Section 2.5 in R Markdown: The Definitive Guide for more info on markdown. 3.3.3 Code In general, you can include code in your R Markdown documents in two ways: Inline code begin with `r and end with a `. E.g., 2 would render the result of log(4, base=2) inline. You can include a “code chunk” inside your R Markdown document. A code chunk begins with three backticks ```{r} and end with three backticks (see minimal example above for an example). There are many options tha tyou can specify in the {} at the beginning of a code chunk. See https://yihui.org/knitr/options/ for details. 3.4 “Knitting” To compile an R Markdown document into a PDF or HTML file, you need to “Knit” it. In RStudio, this is pretty straightforward. Just click the “Knit” button on your document in RStudio. 3.5 Resources R Markdown: The Definitive Guide Code chunk options: https://yihui.org/knitr/options/ "],["homework-2.html", "Chapter 4 Homework 2 4.1 Overview 4.2 Setup 4.3 Part A. Use R as a calculator 4.4 Part B. Built-in Functions 4.5 Part C. Creating vectors 4.6 Part D. Subsetting vectors 4.7 Part E. Types of data", " Chapter 4 Homework 2 4.1 Overview This goal of this homework is as follows: Give you an opportunity to practice some R programming basics Make sure you are comfortable with using markdown syntax to format an R markdown document Make sure you are comfortable creating and knitting an R markdown document into a pdf I recommend that you get started with this assignment early so that you can come to office hours to get help with any issues you have knitting your Rmd document into a pdf. 4.1.1 Grading Uploaded requested files, 10% File is properly/clearly formatted, 10% Proper section headers for each part of your homework You clearly indicate which question each of your responses is associated with Look at your compiled pdf before submitting it. Make sure it looks well-formatted. For this assignment, formatting is particularly important because it’s something you’ll need to know how to do well in R markdown going forward. Programming questions: 80%, all weighted evenly 4.1.2 Deliverables .pdf file (generated by knitting your .Rmd file) .Rmd file (used to generate your pdf file) 4.2 Setup Make sure you have access to a computer with R and RStudio installed (with the ability to install new packages). If you do not, let me know as soon as possible! If you have not done so already, install R and RStudio (step-by-step guides provided in week 1 course content). I strongly encourage you to stay organized. I recommend that you directory on your computer where you can save all of your work for this class (e.g., “cis635” would make for a good name). Within that directory, I recommend keeping each of your homework assignments and projects separated into their own directories. For example, I might organize things as follows: cis635/ homeworks/ hw01 hw02 ... project/ ... Create a new R Markdown file with the title “Homework 2” and with you as the author (hint: this information will go into your R Markdown frontmatter at the top of the file). In your R markdown file, create a section heading for each of the following parts of your homework: Part A. Use R as a calculator Part B. Built-in Functions Part C. Creating vectors Part D. Subsetting vectors Part E. Types of data 4.3 Part A. Use R as a calculator Under your Part A heading, write one code chunk for each of the following calculations: \\[ 1+2(3+4) \\] \\[ log_2(4^3 + 3^{2+1}) \\] \\[ \\sqrt{(4+3)(2+1)} \\] For example, if the calculation is 2 + 2, your code chunk should look something like this when your R Markdown document is compiled: 2+2 ## [1] 4 I want to see each equation translated directly into code. Do not simplify any of the calculations (e.g., 2+1 should be 2+1 in your code, not 3). 4.4 Part B. Built-in Functions A built-in function is one that comes pre-loaded in R (you don’t need to install and load a package to use). To learn how to use a built-in loaded function that you don’t know how to use appropriately, use the help() function. help() takes one parameter, the name of the function that you want information about (e.g., help(abs)). Instead of the help function, you could also use enter ? and then the name of the function in your R console (e.g., ?abs). Familiarize yourself with the built-in functions abs(), round(), sqrt(), tolower(), and toupper(). Under your Part B heading, use these built-in functions to write code that prints the following items (put each of these into a different code chunk in your R Markdown document): The absolute value of -15.5. 4.483847 rounded to one decimal place. The function round() takes two arguments, the number to be rounded and the number of decimal places. “species” in all capital letters. “SPECIES” in all lower case letters. 4.5 Part C. Creating vectors Under your Part C heading, Create the following vectors using just seq() and/or rep(). (don’t use c()) Positive integers from 1 to 99 Odd integers between 1 and 99 The numbers 1,1,1,2,2,2,3,3,3 (hint: read the help pages for seq and rep!) 4.6 Part D. Subsetting vectors Under your Part D heading, use subsetting syntax (square brackets) to write code that completes the following using the vector y. y &lt;- c(3,2,15,-1,22,1,9,17,5) Display only the first value of y. Display the last value of y, in a way that would work if y were any length. (hint: ?length) Display only the values in y that are greater than the mean of y. 4.7 Part E. Types of data Under your part E heading, using the vector y write code that completes the following tasks: y &lt;- c(3,2,15,-1,22,1,9,17,5) Make a logical (TRUE/FALSE) vector describing which values in y are positive. Make a logical vector describing whether any of the values of y are equal to the mean of y. Coerce the vector you just made (in #2 above) from a logical vector to a character vector. Make a logical vector describing whether any of the values of y are equal to the median of y. Coerce the vector you just made (in #4 above) into a categorial vector (using factor()). Make a matrix with 4 rows and 3 columns that looks like this: ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 Coerce that matrix into a dataframe. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
